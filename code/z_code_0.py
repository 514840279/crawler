#!/usr/bin/env python# -*- coding: UTF-8 -*-  '''{"版权":"LDAE工作室","author":{"1":"集体",}"初创时间:"2017年3月",}'''#--------- 外部模块处理<<开始>> ---------##-----系统自带必备模块引用-----#-----系统外部需安装库模块引用-----# 此为建议示例 代码手可以根据需要和个性自行引用#-----DIY自定义库模块引用-----from common import Rule#--------- 外部模块处理<<结束>> ---------##--------- 内部模块处理<<开始>> ---------## ---外部参变量处理# ---全局变量处理# ---内部方法定义# 自定义函数 自由发挥 根据任务不同可以N多个def fun_x(html,url):    column=[        ("标题", "//div[@class='cn']//h1//text()", 'l'),        ("工作地点", "//div[@class='cn']//span//text()", 'l'),        ("薪资", "//div[@class='cn']//strong//text()", 'l'),        ("公司名称", "//div[@class='cn']//p[@class='cname']//a//text()", 'l'),        ("公司地址", "//div[@class='cn']//p[@class='cname']//a//@href", 'l'),        ("公司性质", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 0),        ("公司规模", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 1),        ("行业类别", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 2),        ("工作经验", "//div[@class='t1']//span[1]//text()", 'l'),        ("最低学历", "//div[@class='t1']//span[2]//text()", 'l'),        ("招聘人数", "//div[@class='t1']//span[3]//text()", 'l'),        ("发布日期", "//div[@class='t1']//span[4]//text()", 'l'),        ("标签", "//p[@class='t2']//span//text()", 'l'),        ("职位描述", "//div[@class='bmsg job_msg inbox']//text()", 'l'),        ("职能类别", "//div[@class='mt10']//p[1]//span[@class='el']//text()", 'l'),        ("关键字", "//p[@class='fp f2'][2]//span[@class='el']//text()", 'l'),        ("工作地点", "//div[@class='bmsg inbox']//p//text()[2]", 'l', 1),        ("所属部门", "//div[@class='tCompany_main']//div[@class='tBorderTop_box'][3]//div[@class='bmsg inbox']//text()[2]", 'l', 1),        ("公司介绍", "//div[@class='tmsg inbox']//text()", 'l'),        ("信息来源", "前程无忧", 'n'),    ]    rule = Rule()    column_content = rule.html_content_analysis_detial(html_text=html,url=url,column=column)    return column_content    # 外部动态引用主方法def run_it(*args,**kwargs):    print("123")        #快速检索 替代 like语句 在数据量不大时适用#--------- 内部模块处理<<结束>> ---------##---------- 主过程<<开始>> -----------#def main():    #1 过程一    print("") # 为防止代码泄露打印空值    #2 过程二    #3 过程三    if __name__ == '__main__':    main()    #---------- 主过程<<结束>> -----------#