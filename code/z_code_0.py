#!/usr/bin/env python# -*- coding: UTF-8 -*-  '''{"版权":"LDAE工作室","author":{"1":"集体",}"初创时间:"2017年3月",}'''#--------- 外部模块处理<<开始>> ---------##-----系统自带必备模块引用-----import sys # 操作系统模块1import os # 操作系统模块2import types # 数据类型import time # 时间模块import datetime # 日期模块#-----系统外部需安装库模块引用-----# 此为建议示例 代码手可以根据需要和个性自行引用from lxml import etree # 解析网页源码模块from bs4 import BeautifulSoup as bs_4 #-----DIY自定义库模块引用-----from rule import Rule#--------- 外部模块处理<<结束>> ---------##--------- 内部模块处理<<开始>> ---------## ---外部参变量处理# ---全局变量处理# ---内部方法定义# 结构化维度方法 即抽取特征名列表 数据自封形式def dim():    dim_list = [    "行业分类",    "职业分类",    "标题",    "标题链接",    "职位月薪",    "工作地点",    "发布日期",    "工作性质",    "工作经验",    "最低学历",    "公司",    "公司规模",    "公司属性",    "公司链接",    "职位描述",    ]    return dim_list# 自定义函数 自由发挥 根据任务不同可以N多个def fun_x(html,url):    column=[        ("标题", "//div[@class='cn']//h1//text()", 'l'),        ("工作地点", "//div[@class='cn']//span//text()", 'l'),        ("薪资", "//div[@class='cn']//strong//text()", 'l'),        ("公司名称", "//div[@class='cn']//p[@class='cname']//a//text()", 'l'),        ("公司地址", "//div[@class='cn']//p[@class='cname']//a//@href", 'l'),        ("公司性质", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 0),        ("公司规模", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 1),        ("行业类别", "//div[@class='cn']//p[@class='msg ltype']//text()", 'sp', '|', 2),        ("工作经验", "//div[@class='t1']//span[1]//text()", 'l'),        ("最低学历", "//div[@class='t1']//span[2]//text()", 'l'),        ("招聘人数", "//div[@class='t1']//span[3]//text()", 'l'),        ("发布日期", "//div[@class='t1']//span[4]//text()", 'l'),        ("标签", "//p[@class='t2']//span//text()", 'l'),        ("职位描述", "//div[@class='bmsg job_msg inbox']//text()", 'l'),        ("职能类别", "//div[@class='mt10']//p[1]//span[@class='el']//text()", 'l'),        ("关键字", "//p[@class='fp f2'][2]//span[@class='el']//text()", 'l'),        ("工作地点", "//div[@class='bmsg inbox']//p//text()[2]", 'l', 1),        ("所属部门", "//div[@class='tCompany_main']//div[@class='tBorderTop_box'][3]//div[@class='bmsg inbox']//text()[2]", 'l', 1),        ("公司介绍", "//div[@class='tmsg inbox']//text()", 'l'),        ("信息来源", "前程无忧", 'n'),    ]    rule = Rule()    column_content = rule.html_content_analysis_detial(html_text=html,url=url,column=column)    return column_content    # 外部动态引用主方法def run_it(*args,**kwargs):        #"结果字典"    dic_p = {    "特征名1":["抽取结果1","抽取结果2"],    "特征名2":["抽取结果1","抽取结果2"],    }    # 以下每一个打印位置都是主程序的建议过程执行位置    # 测试用    for x in args:        print (x)    #测试用    for y in kwargs:        print (y + "=" + str(kwargs[y]))            print (dim())    print (fun_x(html=x,url=kwargs['url']))        return dic_p        #快速检索 替代 like语句 在数据量不大时适用#--------- 内部模块处理<<结束>> ---------##---------- 主过程<<开始>> -----------#def main():    #1 过程一    print("") # 为防止代码泄露打印空值    #2 过程二    #3 过程三    if __name__ == '__main__':    main()    #---------- 主过程<<结束>> -----------#